import telebot
from telebot import types
from info import user_data, lok
import json
token = '6668531597:AAG8Uy3tgPBbuRKTeE7t9pGAd0eKtlsQySE'
bot = telebot.TeleBot(token)


def load_data():
    #—á—Ç–µ–Ω–∏–µ json —Ñ–∞–π–ª–∞
    try:
        with open('users.json', "r") as f:
            data = json.load(f)
    except FileNotFoundError:
        data = {}
    return data


def save_data(data):
    #–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    with open('users.json', "w") as f:
        json.dump(data, f)


@bot.message_handler(commands=['start'])
def handle_hi(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –∫–≤–µ—Å—Ç –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π –≤–µ–¥—å–º–∞–∫–∞ üê∫‚öîÔ∏è.'
                                      ' –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /play.'
                                      ' –ï—Å–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ö–æ—á–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π /help')
    save_user_name(message)



def save_user_name(message):
    user_id = message.from_user.id
    name = message.from_user.first_name
    data = load_data()
    user_data[user_id] = {}
    user_data[user_id]["user_id"] = user_id
    user_data[user_id]["name"] = name
    # data[str(user_id)] = {'–ù–æ–≤–∏–≥—Ä–∞–¥': '', '–ê—Ä—Ç –°–∫–µ–ª–∏–≥–µ': '', '–£–Ω–¥–≤–∏–∫': '–í–∞–º–ø–∏—Ä', '': ''}
    save_data(user_data)
    print(user_data)


@bot.message_handler(commands=['play'])

def loc_Novigrad(message):
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[1]['–ù–æ–≤–∏–≥—Ä–∞–¥']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[1]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket, reply_markup=kb)
    bot.register_next_step_handler(msg, con_1)
    save_data(data)


def con_1(message):
    if message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –°–∫–µ–ª–∏–≥–µ':
        loc_Scelige(message)
    elif message.text == '–í–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ –ù–æ–≤–∏–≥—Ä–∞–¥–µ':
        loc_att_place(message)

def loc_Scelige(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[2]['–°–∫–µ–ª–∏–≥–µ']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[2]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket, reply_markup=kb)
    bot.register_next_step_handler(msg, con_2)
    save_data(data)


def con_2(message):
    if message.text == '–ü–æ–º–æ—á—å':
        loc_Undvic(message)
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ù–æ–≤–∏–≥—Ä–∞–¥":
        loc_Novigrad(message)


def loc_Undvic(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[5]['–£–Ω–¥–≤–∏–∫']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[5]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket, reply_markup=kb)
    bot.register_next_step_handler(msg, con_3)
    save_data(data)


def con_3(message):
    if message.text == '–ü–æ–º–æ—á—å —Å–µ–π—á–∞—Å':
        Undvic_good(message)
    elif message.text == '–°—Ä–∞–∑–∏—Ç—å—Å—è —Å –≤–µ–ª–∏–∫–∞–Ω–æ–º':
        Undvic_bad(message)


def Undvic_bad(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[8]['–£–Ω–¥–≤–∏–∫ –ø–ª–æ—Ö–æ–π –∏—Å—Ö–æ–¥']['description']
    bot.send_message(message.chat.id, loket)
    save_data(data)


def Undvic_good(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[9]['–£–Ω–¥–≤–∏–∫ —Ö–æ—Ä–æ—à–∏–π –∏—Å—Ö–æ–¥']['description']
    bot.send_message(message.chat.id, loket)
    save_data(data)


def loc_att_place(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[3]['–º–µ—Å—Ç–æ –Ω–∞–ø–∞–¥–µ–Ω–∏—è']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[3]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket, reply_markup=kb)
    bot.register_next_step_handler(msg, con_4)
    save_data(data)


def con_4(message):
    if message.text == '–ó–∞–≥–æ—Ç–æ–≤–∏—Ç—å –∑–µ–ª—å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥–∞–º':
        battle(message)
    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ –°–∫–µ–ª–∏–≥–µ":
        loc_Scelige(message)


def battle(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[4]['–ª–æ–≥–æ–≤–æ']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[4]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket, reply_markup=kb)
    data[str(user_id)]["loc4"] = message.text
    bot.register_next_step_handler(msg, con_5)
    save_data(data)


def con_5(message):
    if message.text == '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è':
        pub(message)
    elif message.text == '–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è':
        enemy_lair(message)


def pub(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[6]['–∫–æ—Ä—á–º–∞']['description']
    bot.send_message(message.chat.id, loket)


def enemy_lair(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[7]['–£–±–µ–∂–∏—â–µ –≤—Ä–∞–≥–∞']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[7]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket, reply_markup=kb)
    data[str(user_id)]["loc4"] = message.text
    bot.register_next_step_handler(msg, con_6)
    save_data(data)


def con_6(message):
    if message.text == '–£–±–∏—Ç—å –¢–∞—É–ª–µ—Ä–∞':
        Caer_Morhen(message)
    elif message.text == '–ü–æ—â–∞–¥–∏—Ç—å':
        tawerna(message)


def Caer_Morhen(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[10]['–õ–∞–º–±—Ä–µ—Ç —Ö–æ—Ä–æ—à–∏–π –∏—Å—Ö–æ–¥']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[10]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket)
    data[str(user_id)]["loc4"] = message.text
    bot.register_next_step_handler(msg, con_5)
    save_data(data)


def tawerna(message):
    msg = None
    user_id = str(message.from_user.id)
    data = load_data()
    loket = lok[11]['–õ–∞–º–±—Ä–µ—Ç –ø–ª–æ—Ö–æ–π –∏—Å—Ö–æ–¥']['description']
    kb = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=False, one_time_keyboard=True)
    for answer in lok[11]['answers']:
        kb.add(answer)
    msg = bot.send_message(message.chat.id, loket)
    data[str(user_id)]["loc4"] = message.text
    bot.register_next_step_handler(msg, con_5)
    save_data(data)

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '–Ø –±–æ—Ç-–∫–≤–µ—Å—Ç. –ü–æ –∑–∞–¥—É–º–∫–µ\n'
                                      ' –∏–≥—Ä—ã —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ñ–µ–Ω—Ç–µ–∑–∏ –º–∏—Ä–µ –≤–µ–¥—å–º–∞–∫–∞.'
                                      ' –í—ã–±–∏—Ä–∞–π –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –æ–ø–∏—Ä–∞—è—Å—å'
                                      ' –Ω–∞ –∏–Ω—Ç—É–∏—Ü–∏—é –∏ —É–∑–Ω–∞–π, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ.'
                                      ' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ /start.\n'
                                      ' –í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ üëá\n'
                                      '/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
                                      '/start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
                                      '/play - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n'
                                      '/lore - –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏—Ä–µ üó∫\n'
                                      '/bestiary - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω—Å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è –ø–æ —Å—é–∂–µ—Ç—É üìñ')

# if __name__ == "__bot__":
#     bot.infinity_polling(none_stop=True)
bot.infinity_polling()
